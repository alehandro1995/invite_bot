const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const cron = require('node-cron');
require("dotenv").config();

const apiId = 28303926;
const apiHash = "7883d5805795b785fdde6f6f29546809";
const stringSession = new StringSession(process.env.TG_SESSION);

// –°–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
const MESSAGE_TEXT = `
üì£ *–ü–û–î–†–ê–ë–û–¢–ö–ê –î–õ–Ø –í–°–ï–•*
üíµ –°–∫–∏–Ω—É –Ω–∞ –∫–∞—Ä—Ç—É *5000 —Ä—É–±–ª–µ–π*
‚úÖ –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
üïë 10 –º–∏–Ω—É—Ç –∏ –¥–µ–Ω—å–≥–∏ —É —Ç–µ–±—è –≤ –∫–∞—Ä–º–∞–Ω–µ
üëâ –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–∏—à–∏ –≤ –ª—Å`;

(async () => {
	try{
		console.log("üöÄ –ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞...");
		const client = new TelegramClient(stringSession, apiId, apiHash, {
			connectionRetries: 5,
		});

		await client.connect(); // –Ω–µ start, –ø–æ—Ç–æ–º—É —á—Ç–æ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
		console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É
		console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...");
		await sendBroadcast(client);
		
		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron –Ω–∞ –µ–∂–µ—á–∞—Å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
		cron.schedule('0 * * * *', async () => {
			await sendBroadcast(client);
		});
		
		console.log("‚è∞ Cron –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –µ–∂–µ—á–∞—Å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É (–≤ 0 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞)");
	} catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
    process.exit(1);
  }
})();

process.on('SIGINT', async () => {
    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
    if (client) {
        await client.disconnect();
        console.log("üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç Telegram");
    }
    process.exit(0);
});

async function sendBroadcast(client) {
    console.log("\n‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ—á–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...");
    console.log("‚è∞ –í—Ä–µ–º—è:", new Date().toLocaleString());

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (!client.connected) {
            console.log("üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...");
            await client.connect();
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
        const dialogs = await client.getDialogs({});
        console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${dialogs.length}`);

        let sentCount = 0;
        let errorCount = 0;
        let skippedCount = 0;

        for (const dialog of dialogs) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
            if (dialog.isGroup) {
                try {
                    console.log(`\nüì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤: ${dialog.name} (ID: ${dialog.id})`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
                    await client.sendMessage(dialog.entity, {
                      message: MESSAGE_TEXT,
                      parseMode: "markdownv2",
                    });
                    
                    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: ${dialog.name}`);
                    sentCount++;
                } catch (error) {
                    if (error.message.includes('FLOOD')) {
                        console.log(`‚è∏Ô∏è –õ–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É...`);
                        await new Promise(resolve => setTimeout(resolve, 10000));
                        continue;
                    }
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ${dialog.name}:`, error.message);
                    errorCount++;
                }

								// –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤
                await new Promise(resolve => setTimeout(resolve, 10000));
            } else {
                skippedCount++;
            }
        }

        console.log(`\nüìä –ò—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏:`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –≥—Ä—É–ø–ø—ã): ${skippedCount}`);
        console.log(`‚è∞ –°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤: ${new Date(Date.now() + 3600000).toLocaleTimeString()}`);

    } catch (error) {
        console.log("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:", error.message);
    }
}
